#!/usr/bin/env bash

set -e
set -o pipefail

repo_base="$HOME/.dot"
news="$HOME/.config/.news"

function list_repos
{
	for r in $(ls $repo_base); do
		echo -n "$(basename $r):  "
		git --git-dir=${repo_base}/$r remote get-url --all origin 2>/dev/null ||
		git --git-dir=${repo_base}/$r remote -v  | grep fetch
	done
}

function news
{
	if [ -r $news ]; then
		$HOME/opt/bin/mailx -f $news
	else
		echo "no news"
	fi
}

function clone_repo
{
	if [ $# != 2 ]; then
		echo "clone requires two arguments"
		usage
		exit -1
	fi

	local uri=$1; shift
	local name=$1; shift

	local repo_path=${repo_base}/$name;
	if [ -d ${repo_path} ]; then
		echo "Already exists"
		exit -1
	fi

	git clone --bare $uri $repo_path
	$0 $name config status.showUntrackedFiles no
	$0 $name checkout
}

function init_repo
{
	local repo_name=$1; shift
	local repo_path=${repo_base}/$repo_name
	if [ -d ${repo_path} ]; then
		echo "Already exists"
		exit -1
	fi

	mkdir -p ${repo_path}
	git init --bare ${repo_path}
	$0 $repo_name config status.showUntrackedFiles no

	local cfg_path=$HOME/.config/$repo_name
	mkdir -p $cfg_path
	touch ${cfg_path}/vimrc
	touch ${cfg_path}/zshrc
	touch ${cfg_path}/tmux.conf

	$0 $repo_name stage $cfg_path
	$0 $repo_name -c user.name='Auto Generated' -c user.email="$(whoami)@$(hostname -s)" commit -m 'initial; auto-generated commit'
}

function owner
{
	set +e

	for f in $@; do
		for r in $(ls $repo_base); do
			git --git-dir=${repo_base}/$r --work-tree=$HOME ls-files --error-unmatch $f 1>/dev/null 2>/dev/null
			[[ $? -eq 0 ]] && echo "$f is owned by: $r"
		done
	done
}

function usage
{
	cat <<-EOU
		config [[repo] <command>]

		[repo]   : if specified, perform git <command>s
		           only on the specified repo

				e.g. : config master status

		<command>:
		  "list" : list all repos
				 e.g. config list

			"clone": clone a repo into the config system
			   arg : URI
				 arg : name

		     e.g. config clone <uri> <name>

		  "init" : create a skeleton repo
			   arg : name

		     e.g. config init <name>

		  "owner" : pass a file and be told which of the config repos it is managed by
			   arg : path

				 e.g. config owner zsh/function/blah

		  "*"    : passed to git

			   e.g. config status

	EOU
}

function check_for_news
{
	if [ -r $news ]; then

		have_news=$(stat --print="%s" $news)

		if [[ $have_news != "0" ]]; then
			echo "You have news"
		fi

	fi
}

if [ $# -eq 0 ]; then
	usage
	exit
fi

check_for_news

case $1 in
	"news")
		shift;
		news
		exit
		;;
	"list")
		shift;
		list_repos
		exit
		;;
	"clone")
		shift;
		clone_repo $@
		exit
		;;
	"init")
		shift;
		init_repo $@
		exit
		;;
	"owner")
		shift;
		owner $@
		exit
		;;
esac

repos=(${repo_base}/*)

if [ -d ${repo_base}/$1 ]; then
	repos=("${repo_base}/$1"); shift
fi

for repo in ${repos[@]}; do
	shortname=$(basename $repo)
	git --git-dir="$repo" --work-tree=$HOME "$@" | awk '{ print "'$shortname' | " $0 }'
done

